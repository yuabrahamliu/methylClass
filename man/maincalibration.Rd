% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multiomics.R
\name{maincalibration}
\alias{maincalibration}
\title{Calibration for the cross validation results of the raw model}
\usage{
maincalibration(
  out.path = "calibration/",
  out.fname = "probsCVfold",
  y.. = NULL,
  load.path,
  load.fname,
  algorithm = "eSVM",
  normalcv = FALSE,
  brglm.ctrl.max.iter = 10000,
  cores = 1,
  setseed = 1234
)
}
\arguments{
\item{out.path}{For all the calibration cross validation loops, their result
files will be saved in the folder set by this parameter. It is the folder
name will be created in the current working directory.}

\item{out.fname}{The final cross validation result files will be saved in
the folder set by the parameter \code{out.path} and the name prefix of the
result files need to be set by this parameter, default is "probsCVfold".}

\item{y..}{The true labels of the samples. Can be a vector, factor, or NULL.
If it is a vector or factor, each element is a label for a sample and its
element order should be the same as the sample order in the data used for
raw model cross validation performed by the function \code{maincv}. If it
is NULL, there should be a vector or factor named \code{y} in the environment
and the function will load it as the sample true labels.}

\item{load.path}{The calibration model cross validation performed by this
function needs the raw model cross validation results generated by the
function \code{maincv}, and this parameter is used to transfer the path
with the raw model cross validation results. It can be an absolute path
or a relative one.}

\item{load.fname}{The name prefix of the raw cross validation result files
generated by the function \code{maincv}.}

\item{algorithm}{The algorithm of the raw model need to be calibrated here.
Should be one of "RF", "SVM", "XGB", "eSVM", "eNeural", and "MOGONET". The
default value is "eSVM".}

\item{normalcv}{Indicating whether the calibration cross validation loops
here should be normal or nested. If the raw model cross validation loops
are nested, this parameter can be set as either TRUE or FALSE. For FALSE,
the calibration loops here will be the same as the raw model loops. For
TRUE, only the outer loops of the raw model cross validation will be used
here as the normal calibration loops. If the raw model loops are normal,
this parameter can only be TRUE. Default is FALSE.}

\item{brglm.ctrl.max.iter}{A parameter special for the Firth's penalized
calibration. It defines the maximum iteration number for fitting the bias
reduced logistic regression model.}

\item{cores}{Number of threads used for parallization. It only accelerates
the ridge calibration step. Default is 1.}

\item{setseed}{The random seed for the ridge calibration because it needs to
do a grid search for the hyperparameter lambda, and this will be conducted
via a hyperparameter search cross validation process with its random seed
set by this parameter. Default is 1234.}
}
\value{
Will return a matrix recording the cross validation performance of
different raw model and calibration model combinations, including that of
the raw model, the raw + logistic regrssion, the raw + Firth's regression,
and the raw + ridge model. In addition, the calibration score matrixes of
the cross validation loops will be saved in the path set by the parameter
\code{out.path}.
}
\description{
Evaluate the cross validation performance of various machine learning models
after calibration.
}
\examples{
library(methylClass)

labels <- system.file('extdata', 'testlabels.rds', package = 'methylClass')
labels <- readRDS(labels)

betas <- system.file('extdata', 'testbetas.rds', package = 'methylClass')
betas <- readRDS(betas)

maincv(y.. = labels, betas.. = betas, subset.CpGs = 10000, n.cv.folds = 5, 
 normalcv = TRUE, out.path = 'RFCV', out.fname = 'CVfold', 
 method = 'RF', seed = 1234, cores = 4)

RFres <- maincalibration(y.. = labels, load.path = 'RFCV', 
 load.fname = 'CVfold', normalcv = TRUE, algorithm = 'RF', 
 setseed = 1234)
 
\dontrun{
maincv(y.. = labels, betas.. = betas, subset.CpGs = 10000, n.cv.folds = 5, 
 normalcv = TRUE, out.path = 'eSVMCV', out.fname = 'CVfold', 
 method = 'eSVM', seed = 1234, cores = 10)
 
eSVMres <- maincalibration(y.. = labels, load.path = 'eSVMCV', 
 load.fname = 'CVfold', normalcv = TRUE, algorithm = 'eSVM', 
 setseed = 1234)
}
}
