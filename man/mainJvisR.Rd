% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assistant.R
\name{mainJvisR}
\alias{mainJvisR}
\title{Perform J-SNE and J-UMAP embedding on multi-omics data}
\usage{
mainJvisR(
  datlist,
  labels = NULL,
  n_components = 2,
  metric = "euclidean",
  random_state = 1234,
  Lambda = 5,
  perplexity = 30,
  n_neighbors = 15,
  min_dist = 0.1,
  scaledat = TRUE,
  legendcolnum = 1,
  pythonpath = NULL
)
}
\arguments{
\item{datlist}{A list with each element as a single-omics data matrix, and
each row of this single-omics matrix is a sample, while each column is a
feature. The row names are the sample names, and the column names are the
feature names. The names of the whole list elements are the omics data
names.}

\item{labels}{The true labels of the samples. Only useful when generating
the scatter plots for the J-SNE and J-UMAP results. If it is a vector
containing the true labels of the samples, the sample dots on the plots
can be stained with different colors representing the labels. While it can
be set as NULL with no influence on the J-SNE and J-UMAP results, just all
the sample dots on the final plots will be colored as gray.}

\item{n_components}{The number of final components after dimension reduction
and its default value is 2, so that the corresponding 2-D scatter plots
will also be generated. If it is not 2, J-SNE and J-UMAP results will also
be returned, but no plots will be drawn.}

\item{metric}{The type of the sample-sample distance need to be used to do
J-SNE and J-UMAP. Default is 'euclidean', but can also be 'chebyshev',
'minkowski', 'correlation', 'cosine', or others.}

\item{random_state}{The random seed number. Default is 1234.}

\item{Lambda}{The value of the regularization coefficient contained in the
optimization target of the J-SNE and J-UMAP. Default is 5. If some of the
multi-omics data contains much noise, this value should be set as a small
one such as 3, so that the noisy omics data will only account for a small
weight.}

\item{perplexity}{The perplexity parameter for the J-SNE method. It is
related to the number of nearest neighbors that is used in other manifold
learning algorithms. Larger datasets usually require a larger perplexity.
Consider selecting a value between 5 and 50. Default is 30.}

\item{n_neighbors}{The size of local neighborhood used for manifold
approximation for the J-UMAP method. Larger values result in more global
views of the manifold, while smaller values result in more local data
being preserved. Default is 15.}

\item{min_dist}{The effective minimum distance between embedded points, used
for the J-UMAP method. Smaller values will result in a more clustered/
clumped embedding where nearby points on the manifold are drawn closer
together, while larger values will result in a more even dispersal of
points. Default is 0.1.}

\item{scaledat}{For each feature in each omics data, whether it should be
centered and scaled to a mean of 0 and a standard deviation of 1. Default
is TRUE.}

\item{pythonpath}{This function is based on \code{Python}, so the directory
of \code{Python} you want to use to run it should be transferred to the
function via this parameter, and several \code{Python} modules need to be
installed to your \code{Python} environment, including \code{__future__},
\code{numba}, \code{time}, \code{locale}, \code{warnings}, \code{sklearn},
\code{joblib}, \code{pkg_resources}, \code{numpy}, \code{collections},
\code{pkg_resources}, \code{scipy}, and \code{pynndescent}.}

\item{legenedcolnum}{The number of columns will be accounted by the legend on
the scatter plot. Default is 1.}
}
\value{
A list with the J-SNE and J-UMAP coordinates for the input samples,
with corresponding scatter plots generated
}
\description{
Perform J-SNE and J-UMAP embedding on multi-omics data with scatter plot
generated
}
\examples{
library(methylClass)

labels <- system.file('extdata', 'testlabels.rds', package = 'methylClass')
labels <- readRDS(labels)

betas <- system.file('extdata', 'testbetas.rds', package = 'methylClass')
betas <- readRDS(betas)

top1k <- mainfeature(betas.. = betas, subset.CpGs = 1000, cores = 4, 
 topfeaturenumber = 50000)

omicslist = list(methyl = betas[,top1k$features])

library(reticulate)

pypath <- py_exe()

jvisres <- mainJvisR(datlist = omicslist, labels = labels, 
 random_state = 1234, pythonpath = pypath)
}
